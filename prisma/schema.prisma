// SpendCheck Prisma Schema
// This replaces database triggers with ORM-based automatic timestamp management

generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User preferences for authenticated users
model UserPreference {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String   @unique @map("user_id") @db.Uuid
  currencyCode          String   @default("USD") @map("currency_code")
  currencySymbol        String   @default("$") @map("currency_symbol")
  currencyName          String   @default("US Dollar") @map("currency_name")
  theme                 String   @default("auto") // 'light' | 'dark' | 'auto'
  notificationsEnabled  Boolean  @default(true) @map("notifications_enabled")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  @@map("user_preferences")
}

// Spending categories (system and user-defined)
model Category {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String?  @map("user_id") // Nullable for system categories
  name            String
  color           String   @default("#3b82f6")
  icon            String   @default("folder-outline")
  isDefault       Boolean  @default(false) @map("is_default")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  spendingEntries SpendingEntry[]

  // Unique constraint per user
  @@unique([userId, name])
  @@map("categories")
}

// Main spending entries table
model SpendingEntry {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String    @map("user_id") @db.Uuid
  amount     Decimal   @db.Decimal(10, 2)
  currency   String    @default("USD")
  category   String?   // Legacy string category field
  categoryId String?   @map("category_id") @db.Uuid // New relation field
  date       DateTime  @db.Date
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  // Relations
  categoryRef Category? @relation(fields: [categoryId], references: [id])

  @@map("spending_entries")
}

// Views for database insights (optional)
// These are computed values that can be used for analytics
